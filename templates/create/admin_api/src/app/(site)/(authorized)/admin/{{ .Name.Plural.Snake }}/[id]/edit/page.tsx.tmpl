import { Suspense } from "react";
import { auth } from "@/libraries/auth";
import { {{ .Name.Singular.Title }}Repository } from "@/repositories/admin/{{ .Name.Singular.Snake }}_repository";
import { getTranslations } from "next-intl/server";
import AdminPageHeader from "@/components/molecules/AdminPageHeader";
import DataForm from "@/components/organisms/DataForm";
import { notFound } from "next/navigation";
import { {{ .Name.Singular.Title }} } from "@/models/admin/{{ .Name.Singular.Snake }}";
import { update{{ .Name.Singular.Title }} } from "./actions";
import { {{ .Name.Singular.Title }}UpdateRequestSchema } from "@/requests/admin/{{ .Name.Singular.Snake }}_update_request";
import { redirect } from "next/navigation";

type Props = {
  params: {
    id: string;
  };
};

export default async function Page({ params }: Props) {
  const {id} = await params;
  const tMenu = await getTranslations("Menu.Admin");
  const t = await getTranslations("{{ .Name.Plural.Title }}");

  const session = await auth();
  let data: {{ .Name.Singular.Title }} | null = null;
  try {
    const repository = new {{ .Name.Singular.Title }}Repository(session?.access_token);
    data = await repository.findById(id);
  } catch (error) {
    console.log(error);
    return notFound();
  }

  const structure = [
{{- range .Columns}}
    {
      name: t("{{ .Name.Original }}"),
      key: "{{ .Name.Original }}",
{{- if .IsUnixTimestamp}}
      type: "datetime",
{{- else }}
      type: "{{ .UIType }}",
{{- end }}
      value: data.{{ .Name.Original }},
      required: {{if .Nullable}}false{{else}}true{{end}},
      placeholder: t("{{ .Name.Original }}"),
    },
{{- end }}
  ];

  return (
    <Suspense fallback={<div>Loading...</div>}>
      <main>
        <div className="mx-auto max-w-7xl sm:px-6 lg:px-8 text-stone-800">
          <div className="px-4 sm:px-6 lg:px-8">
            <AdminPageHeader
              breadcrumbLinks={[
                { href: "/admin/dashboard", label: tMenu("dashboard") },
                { href: "/admin/{{ .Name.Plural.Snake }}", label: tMenu("{{ .Name.Plural.Snake }}") },
              ]}
              title={data.name}
              buttons={[]}
            />
            <DataForm<typeof {{ .Name.Singular.Title }}UpdateRequestSchema>
              structure={structure}
              submitAction={async (data) => {
                "use server";
                const success = await update{{ .Name.Singular.Title }}(id, data);
                if (success) {
                  redirect(`/admin/{{ .Name.Plural.Snake }}/${id}`);
                }
                return false;
              }}
            />
          </div>
        </div>
      </main>
    </Suspense>
  );
}
