---
description: 
globs: 
alwaysApply: true
---
# 認証システムのDB設計ガイド

このドキュメントは、本リポジトリの認証システムにおけるデータベース設計について説明します。

## 概要

本システムはNextAuth.js v5 (beta)を使用した認証システムで、独自のCredentials Providerを実装しています。認証に必要なフィールドは`src/models/auth.ts`で定義されており、これを基にデータベーステーブルを設計します。

## 必須フィールド

認証システムが正常に動作するためには、以下のフィールドが必須です：

### Auth モデル（`src/models/auth.ts`）

```typescript
export const AuthSchema = z.object({
  id: z.string(),
  email: z.string(),
  password: z.string(),
  name: z.string(),
  permissions: z.array(z.string()),
});
```

これらのフィールドは認証システムの中核となるため、すべてのユーザーテーブルに含まれている必要があります。

## Prismaスキーマの基本構造

### 基本的なUserテーブル

```prisma
model User {
  id          String   @id @default(uuid()) @db.Uuid
  name        String   @db.Text
  email       String   @unique @db.Text
  password    String   @db.Text
  permissions Json
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map(name: "users")
}
```

### フィールドの詳細説明

1. **id**: UUID形式の一意識別子
   - 自動生成される
   - PostgreSQLのUUID型を使用

2. **email**: ログインに使用するメールアドレス
   - 一意制約が必要
   - 大文字小文字を区別

3. **password**: ハッシュ化されたパスワード
   - PBKDF2アルゴリズムでハッシュ化
   - フォーマット: `pbkdf2:100000:salt:hash`

4. **name**: ユーザーの表示名

5. **permissions**: 権限の配列
   - JSON形式で保存
   - 例: `["admin", "read", "write"]`

## 拡張フィールドの追加

### 1. モデルの拡張

`src/models/user.ts`でAuthSchemaを拡張する例：

```typescript
import { z } from "zod";
import { AuthSchema } from "./auth";

// 拡張フィールドのスキーマ
export const UserExtensionSchema = z.object({
  // プロフィール関連
  bio: z.string().optional(),
  avatarUrl: z.string().url().optional(),
  phoneNumber: z.string().optional(),
  
  // アカウント管理
  isActive: z.boolean().default(true),
  emailVerified: z.boolean().default(false),
  lastLoginAt: z.date().optional(),
  
  // 追加の権限管理
  department: z.string().optional(),
  role: z.enum(["user", "manager", "admin"]).default("user"),
});

// AuthSchemaと拡張フィールドをマージ
export const UserSchema = AuthSchema.extend(UserExtensionSchema.shape);

export type User = z.infer<typeof UserSchema>;
```

### 2. Prismaスキーマの拡張

```prisma
model User {
  // 必須フィールド（Authモデル）
  id          String   @id @default(uuid()) @db.Uuid
  name        String   @db.Text
  email       String   @unique @db.Text
  password    String   @db.Text
  permissions Json
  
  // 拡張フィールド - プロフィール
  bio         String?  @db.Text
  avatarUrl   String?  @map("avatar_url") @db.Text
  phoneNumber String?  @map("phone_number") @db.VarChar(20)
  
  // 拡張フィールド - アカウント管理
  isActive      Boolean  @default(true) @map("is_active")
  emailVerified Boolean  @default(false) @map("email_verified")
  lastLoginAt   DateTime? @map("last_login_at")
  
  // 拡張フィールド - 権限管理
  department String? @db.VarChar(100)
  role       String  @default("user") @db.VarChar(20)
  
  // タイムスタンプ
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  
  // リレーション（必要に応じて）
  posts     Post[]
  comments  Comment[]

  @@map(name: "users")
  @@index([email])
  @@index([department])
}
```

## 高度な拡張パターン

### 1. ソーシャルログイン対応

```prisma
model User {
  // 基本フィールド...
  
  // OAuth対応
  provider    String?  @default("credentials") @db.VarChar(50)
  providerId  String?  @map("provider_id") @db.VarChar(255)
  
  // 複数プロバイダー対応の場合
  accounts Account[]
}

model Account {
  id                String  @id @default(uuid()) @db.Uuid
  userId            String  @map("user_id") @db.Uuid
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refreshToken      String? @map("refresh_token") @db.Text
  accessToken       String? @map("access_token") @db.Text
  expiresAt         Int?    @map("expires_at")
  tokenType         String? @map("token_type")
  scope             String?
  idToken           String? @map("id_token") @db.Text
  sessionState      String? @map("session_state")
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([provider, providerAccountId])
  @@map("accounts")
}
```

### 2. 2要素認証対応

```prisma
model User {
  // 基本フィールド...
  
  // 2FA
  twoFactorEnabled Boolean @default(false) @map("two_factor_enabled")
  twoFactorSecret  String? @map("two_factor_secret")
}
```

### 3. パスワードリセット機能

```prisma
model User {
  // 基本フィールド...
  
  // パスワードリセット
  passwordResetToken   String?   @unique @map("password_reset_token")
  passwordResetExpires DateTime? @map("password_reset_expires")
}
```

## 実装時の注意点

### 1. モデルの変換関数

Prismaモデルからアプリケーションモデルへの変換：

```typescript
import { User as PrismaUser } from "@/generated/prisma";
import { UserSchema } from "./user";

export function transformPrismaToModel(data: PrismaUser): User {
  return UserSchema.parse({
    ...data,
    // 必要に応じて変換処理
    permissions: data.permissions as string[],
  });
}
```

### 2. リポジトリでの実装

```typescript
export class UserPrismaRepository extends PrismaRepository<User> {
  async findByEmail(email: string): Promise<User | null> {
    const user = await this.prisma.user.findUnique({
      where: { email },
    });
    
    if (!user) return null;
    
    return transformPrismaToModel(user);
  }
  
  async create(data: Omit<User, "id" | "createdAt" | "updatedAt">): Promise<User> {
    const user = await this.prisma.user.create({
      data: {
        ...data,
        permissions: data.permissions || [],
      },
    });
    
    return transformPrismaToModel(user);
  }
}
```

### 3. マイグレーション

スキーマ変更後は以下のコマンドを実行：

```bash
# 開発環境でのマイグレーション
npx prisma migrate dev

# 本番環境へのデプロイ
npx prisma migrate deploy

# Prismaクライアントの再生成
npx prisma generate
```

## セキュリティ考慮事項

1. **パスワード**: 必ずハッシュ化して保存（PBKDF2使用）
2. **permissions**: 権限チェックは必ずサーバーサイドで実施
3. **email**: 一意制約により重複登録を防止
4. **sensitiveフィールド**: APIレスポンスから除外する

## まとめ

認証システムのDB設計では、`src/models/auth.ts`で定義された必須フィールドを確実に実装しつつ、アプリケーションの要件に応じて適切に拡張することが重要です。拡張時は、Zodスキーマ、Prismaスキーマ、およびリポジトリ実装の整合性を保つことを忘れないでください。