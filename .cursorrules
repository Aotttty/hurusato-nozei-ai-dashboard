You are an AI assistant with advanced problem-solving skills. Follow the instructions below to accomplish your tasks efficiently and accurately.

First, be sure to review the instructions received from the user as follows

<instructions>
{{instructions}}
</instructions>.

Based on these instructions, follow the process below.

1. analyze and plan the instructions
   <Task Analysis>.
   - Briefly summarize the major tasks.
   - Review the technology stack listed and consider how to implement within its constraints.  
     *** Do not change the version listed in the technology stack and be sure to get approval if necessary. **
   - Identify critical requirements and constraints.
   - List potential challenges.
   - List in detail the specific steps for task execution.
   - Determine the optimal order in which to execute those steps.

   ### Prevent duplicate implementations
   Before implementation, please check the following
   - Existing similar functions
   - Functions or components with the same or similar names
   - Overlapping API endpoints
   - Identify processes that can be shared

    This section will guide the entire process that follows, so please take the time to conduct a thorough and comprehensive analysis.
   </Task Analysis>

2. execute the tasks
   - Execute the identified steps one by one.
   - After each step is completed, please provide a brief progress report.
   - When implementing the steps, please note the following points:
     - Adhere to the appropriate directory structure.
     - Maintain consistent naming conventions
     - Appropriate placement of common processes 3.

3. quality control and problem handling
   - Verify the results of each task execution as soon as possible.
   - If errors or inconsistencies occur, the following process should be used. a. Isolate the problem and identify the cause (log analysis, check debug information):
     a. Isolate the problem and identify the cause (log analysis, check debugging information)
     b. Create and implement a countermeasure plan
     c. Verify the operation after the correction
     d. Check and analyze debug logs
   
   - Verification results should be recorded in the following format:
     a. Verification items and expected results
     b. Actual results and differences
     c. Necessary actions to be taken (if applicable)

4. final confirmation
   - Upon completion of all tasks, evaluate the entire deliverable.
   - Check for consistency with the original instructions and make adjustments as necessary.
   - Final check that there is no duplication in the implemented functions.

5. report of results
   Report the final results in the following format
   ```markdown
   ## Execution Result Report

   ## summary
   [Briefly describe the overall summary.]

   ## Execution steps
   1. description and result of step 1] 2.
   2.[description and results of step 2].
   ...

   ## Final deliverables
   [details of deliverables and links, if applicable] ...

   ## Issue Response (if applicable)
   - Issue(s) encountered and details of response
   - Future notes

   ## Notices and suggestions for improvement
   - [Describe any notes or suggestions for improvement]
   ````

## Important Notes

- If anything is unclear, be sure to obtain confirmation before starting work.
- If any important decisions need to be made, please report them and obtain approval each time.
- If an unforeseen problem arises, report it immediately and suggest a course of action.
- **Do not make any changes that are not explicitly indicated. **If there is a change that you think is necessary, report it as a proposal first and obtain approval before implementing it.
- **In particular, changes to the UI/UX design (layout, colors, fonts, spacing, etc.) are prohibited** and if changes are necessary, please be sure to provide a reason and obtain approval in advance.
- **Do not change the versions (APIs, frameworks, libraries, etc.) listed in the technology stack without permission. ** If a change is necessary, do not make the change until you have clearly stated the reason for the change and obtained approval.
- Do not change `.env`. If you need to add environment variables, do so in `.env.sample`. Never delete or change environment variables.

---

# TypeScript Development Guidelines

## Core Requirements
- TypeScript must be used for all code generation
- Never use the `any` type as it will break the build
- Always use Shadcn and Tailwind CSS, but implement without using Card components
- Avoid typing components with React.FC
- Use const for component declarations instead of function
- Follow React's composable patterns

## State Management and Performance
- Minimize use of useState and useEffect hooks
- Prefer computed state where possible
- Use useMemo and useCallback when necessary to prevent unnecessary re-renders
- Prioritize server actions and useActionState
- Fall back to fetch and API route handlers when server actions aren't suitable
- When components need to modify data, they should receive server actions as props

## Component Architecture
- Prioritize server components whenever possible
- Create client components only when necessary
- Utilize Suspense and streaming capabilities where possible
- For components requiring specific functionality not tightly coupled to the component itself, create higher-order components
- Group related components, hooks, and functions in the same file when it makes semantic sense for easier distribution and usage

## Forms and Data Handling
- Implement forms as server-side components
- Only use client components for dynamic operations (e.g., user registration sections)
- Always validate inputs using Zod in server actions and API endpoints
- Always HTML escape text content

## Custom Hooks
- Create custom hooks to encapsulate specific logic when grouping useState and useEffect makes sense
- Custom hooks should be focused and reusable

## Best Practices
- Group related components, hooks, and functions in the same file when it makes semantic sense for easier distribution and usage
- Follow consistent naming conventions
- Maintain clear separation of concerns
- Ensure proper error handling
- Implement proper type safety throughout the codebase

---

# Next.js Development Guidelines

## Directory Structure

├── components.json
├── messages
│   ├── en.json
│   └── ja.json
├── next.config.ts
├── package-lock.json
├── package.json
├── postcss.config.mjs
├── public
│   └── images
│       ├── file.svg
├── src
│   ├── app
│   │   ├── (site)
│   │   │   ├── (authorized)
│   │   │   │   ├── (app)
│   │   │   │   │   ├── dashboard
│   │   │   │   │   │   └── page.tsx
│   │   │   │   │   └── layout.tsx
│   │   │   │   └── admin
│   │   │   │       ├── layout.tsx
│   │   │   │       ├── page.tsx
│   │   │   │       └── users
│   │   │   │           ├── [id]
│   │   │   │           │   ├── actions.ts
│   │   │   │           │   ├── edit
│   │   │   │           │   │   ├── actions.ts
│   │   │   │           │   │   └── page.tsx
│   │   │   │           │   └── page.tsx
│   │   │   │           ├── create
│   │   │   │           │   ├── actions.ts
│   │   │   │           │   └── page.tsx
│   │   │   │           └── page.tsx
│   │   │   └── (unauthorized)
│   │   │       ├── auth
│   │   │       │   ├── forgot-password
│   │   │       │   │   ├── actions.ts
│   │   │       │   │   └── page.tsx
│   │   │       │   ├── layout.tsx
│   │   │       │   ├── reset-password
│   │   │       │   │   ├── actions.ts
│   │   │       │   │   └── page.tsx
│   │   │       │   ├── signin
│   │   │       │   │   ├── actions.ts
│   │   │       │   │   └── page.tsx
│   │   │       │   └── signup
│   │   │       │       ├── actions.ts
│   │   │       │       └── page.tsx
│   │   │       ├── layout.tsx
│   │   │       └── page.tsx
│   │   ├── api
│   │   │   └── auth
│   │   │       └── [...nextauth]
│   │   │           └── route.ts
│   │   ├── favicon.ico
│   │   ├── fonts
│   │   │   ├── GeistMonoVF.woff
│   │   │   └── GeistVF.woff
│   │   ├── globals.css
│   │   ├── layout.tsx
│   │   └── providers.tsx
│   ├── components
│   │   ├── atoms
│   │   │   ├── button.tsx
                  :
│   │   │   ├── select.tsx
│   │   │   └── skeleton.tsx
│   │   ├── molecules
│   │   │   ├── AdminPageHeader
│   │   │   │   └── index.tsx
│   │   │   ├── DataTextInputField
│   │   │   │   └── index.tsx
│   │   │   ├── Pagination
│   │   │   │   └── index.tsx
│   │   └── organisms
│   │       ├── DataTable
│   │       │   └── index.tsx
│   │       ├── Footer
│   │       │   └── index.tsx
│   │       ├── Header
│   │       │   └── index.tsx
│   │       └── SideMenu
│   │           └── index.tsx
│   ├── constants
│   │   └── auth.ts
│   ├── exceptions
│   │   ├── api_error.ts
│   │   └── auth_error.ts
│   ├── i18n
│   │   ├── request.ts
│   │   └── routing.ts
│   ├── libraries
│   │   ├── api_client.ts
│   │   ├── auth.ts
│   │   └── css.ts
│   ├── middleware.ts
│   ├── models
│   │   ├── access_token.ts
│   │   ├── status.ts
│   │   └── user.ts
│   ├── repositories
│   │   ├── auth_repository.ts
│   │   ├── base_repository.ts
│   │   └── user_repository.ts
│   ├── requests
│   │   ├── admin
│   │   │   ├── user_create_request.ts
│   │   │   └── user_update_request.ts
│   │   ├── forgot_password_request.ts
│   │   ├── reset_password_request.ts
│   │   ├── signin_request.ts
│   │   └── signup_request.ts
│   └── types
│       └── next-auth.d.ts
├── tailwind.config.ts
└── tsconfig.json

## UIコンポーネント

基本的なUIコンポーネントには、ShadCNのコンポーネントを利用する。ShadCNのコンポーネントは、`/src/components/ui`ではなく`/src/components/atoms`に格納されており、クラス名を扱う`cn`関数は、`/src/libraries/css`に用意されている。ただし、Cardは利用しないでください。

## コンポーネントの構造

コンポーネントの整理には、いわゆるAtomic Design Patternを利用しており、`/src/components/atoms`と`/src/components/molecules`、`/src/components/organisms`に、それぞれコンポーネントの粒度に応じて格納されている。

## Server Side Component / Client Side Component

基本的には、Server Side Componentを利用する。

## 多言語化

多言語化には、`next-intl` を利用している。`/messages/`に言語ファイルが格納されており、デフォルトでは日本語（`ja.json`）と英語（`en.json`）を用意している。コンポーネントやページに直接文章を埋め込むことはせず、必ずこちらに記述する。

`/src/components/`以下のコンポーネントに関しては、以下のように、"Components"の中に、コンポーネント名ごとに記述する。

```
  "Components": {
    "Pagination": {
      "previous": "Previous",
      "next": "Next",
      "first": "First",
      "last": "Last",
      "no_result_found": "No results found"
    }
  }
```

# ページを追加する

Next.js 15のApp Routerを利用しているので、それに準じてページを追加する。ページの `page.tsx` はすべてServer Side Componentとする。

まず、追加するページの種類によって、追加すべき場所が以下のように異なる。

| ページの種類           | 追加場所                            |
| :--------------------- | :---------------------------------- |
| 認証不要のページ       | `src/app/(site)/(unauthorized)`     |
| 管理画面               | `src/app/(site)/(authorized)/admin` |
| 一般ユーザー向けページ | `src/app/(site)/(authorized)/(app)` |

まずはどのようなページを追加するかによって、追加する場所を決める。

## 認証不要ページの追加

認証不要ページは、`src/app/(site)/(unauthorized)`以下に配置する。認証不要ページとは、ログインや新規登録のページのほか、ランディングページ、利用規約、プライバシーポリシーなど、認証を必要としないページのことである。このページは誰でもがアクセスできる。

認証関係のページは、`src/app/(site)/(unauthorized)/auth`以下に配置する。現在では、以下のページがある

| ページの種類             | ファイルパス                                          |
| :----------------------- | :---------------------------------------------------- |
| ログインページ           | `src/app/(site)/(unauthorized)/auth/signin/`          |
| 新規登録ページ           | `src/app/(site)/(unauthorized)/auth/signup/`          |
| パスワードリセットページ | `src/app/(site)/(unauthorized)/auth/reset-password/`  |
| パスワード忘れたページ   | `src/app/(site)/(unauthorized)/auth/forgot-password/` |

認証ページとして、何かそれ以外を追加する場合は、上記のページを参考にして追加する。

## 管理画面の追加

管理画面は、`src/app/(site)/(authorized)/admin`以下に配置する。管理画面は、管理者のみがアクセスできるページである。

### CRUDページの追加

リソースのCRUDページも、`src/app/(site)/(authorized)/admin/[リソース名の複数形]`以下に配置する。リソースのCRUDページとは、リソースの一覧、詳細、新規作成、編集、削除のページのことである。例えば User リソースの場合は、`src/app/(site)/(authorized)/admin/users`以下に配置する。

| ページの種類   | ファイルパス                                                       |
| :------------- | :----------------------------------------------------------------- |
| 一覧ページ     | `src/app/(site)/(authorized)/admin/[リソース名の複数形]/`          |
| 詳細ページ     | `src/app/(site)/(authorized)/admin/[リソース名の複数形]/[id]`      |
| 新規作成ページ | `src/app/(site)/(authorized)/admin/[リソース名の複数形]/create`    |
| 編集ページ     | `src/app/(site)/(authorized)/admin/[リソース名の複数形]/[id]/edit` |

できる限りServer Side Componentを使う。APIへのアクセスはRepositoryを使って行う。例えばUserの場合はUserRepositoryを用いる。Repositoryは`repositories`ディレクトリに`repositories/user_repository.ts`のように配置されている。全てのRepositoryは`repositories/base_repository.ts`を継承している。
#
APIから変えるデータは、`models`ディレクトリに`models/user.ts`のように定義されている。これは、APIから返されるデータの型を定義するためのものである。

### その他のページの追加

管理画面にCRUD以外のページを追加する場合も、`src/app/(site)/(authorized)/admin`以下に配置する。

## 一般ユーザー向けページの追加

一般ユーザー向けページは、`src/app/(site)/(authorized)/(app)`以下に配置する。一般ユーザー向けページは、一般ユーザーがアクセスできるページである。

## ページの構造

`src/app/(site)/` 以下には、`page.tsx`のみをおき、その中で表示されるコンポーネントについては、`/components/molecules`、`/components/organisms`以下に配置する。
`page.tsx`は常にサーバサイドコンポーネントとし、Repositoryを介したデータの取得は必ず`page.tsx`で行う。`/components/organisms`がClient Side Componentになる場合は、バウンダリをしっかりと意識して設計する。

### アクション

Formをクリックした場合など、データアクセスが必要な場合、 @actions.ts/(unauthorized)/auth/signin/actions.ts) のように、`page.tsx` と同じディレクトリの `actions.ts` にServer Side Actionとして記述をする。

---

# データアクセス

データアクセスには、`src/repositories` に格納されているリポジトリクラスを必ず利用する。

## リポジトリのルール

リポジトリ層はデータの種類ごとに作られる。また、管理画面用のリポジトリは `src/repositories/admin` に、ユーザー向けアプリケーション用のリポジトリは `src/repositories/app` にそれぞれ別に作る必要がある。例えばユーザー情報を取得するためのユーザー向けアプリケーション用のリポジトリは `src/repositories/app/user_repositories.ts` に作成することになる。これは、バックエンドがローカルやAirTableなどでも変わらない。

すべてのリポジトリは @base_repository.ts にある BaseRepository を継承する。ただし、そのデータの種類によって BaseRepositoryを継承した別のクラスを継承する場合がある。

なお、リクエストやレスポンスなどのスキーマをRepositoryのファイルに書くことは禁止する。レスポンスのモデルは `/src/models` 以下に、リクエストは `/src/requests` に書くこと。

### 1. APIサーバを別途用意している場合

BaseRepositoryを直接継承して作成する。

### 2. ローカルデータにアクセスする場合

プロトタイプを作る際には、別途サーバを用意するのでは無く、`public/data` 下にJSONデータや画像などを置き、それに直接アクセスさせる場合がある。その際には、 @local_repository.ts のLocalRepositoryを継承して利用する。データは `public/data/[モデル名]/index.json` に一覧、`public/data/[モデル名]/[id].json` にデータを格納しておく。ローカルデータアクセスの場合は、データのアップデートや作成、削除は対応しない。

### 3. AirTableにアクセスする場合

プロトタイプを作る際でも、データを作成、保存、削除がしたい場合には、AirTableをバックエンドとして利用する。この場合は、 @airtable_repository.ts を継承してリポジトリを作成する。

### 4. Difyにアクセスする場合

AIを利用する際に、AIのワークフロー実行にはDifyを利用する。チャットのために利用する場合は、 @chat_repository.ts を利用する。それ以外のワークフローを利用する場合は、 @workflow_repository.ts を利用する。

## 新たにAPIサーバ以外のサードパーティAPIにアクセスするRepositoryを作成する場合

@airtable_repository.ts と同様に、`/src/repositories/' に、 @base_repository.ts のBaseRepositoryを継承したモデルを作成する。そして、そのサードパーティAPIを使うデータアクセスは、その新しいリポジトリを継承して作成する必要がある。

### データモデル

リポジトリによって返されるデータは、 `app/models/` の下に定義される。Repositoryと同様、管理画面用のモデルは `src/models/admin` に、ユーザー向けアプリケーション用のモデルは `src/models/app` に定義される。その名前は `users` のようにモデルの複数形となる（Snake Caseを利用）。モデルは以下のように、zod を利用して定義される。

```typescript
import { z } from "zod";

export const UserSchema = z.object({
  id: z.string(),
  name: z.string(),
  email: z.string(),
  permissions: z.array(z.string()),
});

export type User = z.infer<typeof UserSchema>;
```

リクエストは、`app/requests` の下に定義される。Repositoryと同様、管理画面用のモデルは `src/requests/admin` に、ユーザー向けアプリケーション用のモデルは `src/requests/app` に定義される。 @user_create_request.ts と @user_update_request.ts のように、[モデル名（単数形）]_[アクション名]_request.ts という名称で定義し、こちらも zod を使って定義する。

```typescript
export const UserCreateRequestSchema = z.object({
  email: emailSchema,
  password: passwordSchema,
  name: nameSchema,
  permissions: permissionsSchema,
});

export type UserCreateRequest = z.infer<typeof UserCreateRequestSchema>;
```

